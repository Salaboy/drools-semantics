/*
 * Copyright 2011 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 package org.drools.semantics.model.domain;

import org.drools.semantics.model.IThing;
import org.drools.semantics.model.TraitMantle;
import java.util.Map;
import java.util.HashMap;


global java.util.List list;
global java.util.List tokens;


// mock class for triples
declare Trippple
    subj    : Object
    prop    : String
    obj     : Object
end



// mock trigger rule
rule "Trigger"
salience 9999
when
    String ( this == "trigger" )
then
    // create a human and some tripples, then insert everything
    Human h = new Human("john",19);
    insert( h );
    insert( new Trippple( h, "school", "Zchool") );
    insert( new Trippple( h, "weight", 94.3) );
end



// mock trigger rule 2
/**
    Humans and their properties are reunited together and used to build an IThing
    IThings can then be "recognized" (classified) according to their properties
*/
rule "Wrap"
when
    $o :   Human( )
    $map : Map() from accumulate (
                 Trippple( $o, $prop, $tgt ; ),
                 init( Map map = new HashMap(); ),
                 action( map.put($prop, $tgt); ),
                 result( map )
           )
then
    IThing<Human> thing = TraitMantle.wrap($o,$map);
    insert( thing );
end

// mock trigger rule 3
/**
  Same would apply to other types, including almost-primitives such as Strings
*/
rule "Wrap2"
when
    $o :   String( )
then
    IThing thing = TraitMantle.wrap($o);
    insert( thing );
end




/**
    CWA recognition rule:
        declare Student equivalentTo Human and exists hasSchool and hasName == "john" and hasHumanSkill == "humanSkill"

    Notice the way both native and dynamic properties can be accessed and constrained.
    At this point, no interface has been set, so properties are always accessed as if they were dynamic

    Also notice that this rule will not apply to wrapped Strings, as constraints on the core class are applied

    Consequences are mixed:
        - a side effect method is invoked
        - the object is modified on-the-fly (beware!)
        - a trait is applied, as a concept match has been recognized

    Implementation notice:
        as we are updating our "thing" object, the standard drools "update" function can be used.
        Only, we need to notify the engine AND update the referenced object, so the full update
        must be used
*/
rule "Claxification"
dialect "mvel"
when
    // this is not the "semantic" way of deciding who's a student, but for the example it will do
    $x : IThing( $t : types not contains IStudent,
                 $k : core,
                 $s : this["school"] != null,
                 $n : this["name"] == "john" )
    Human( humanSkill == "humanSkill" ) from $k
then
    System.out.println( " Schooling thing " + $x );
    $x.set("name","johnnie");
    update( drools.getFactHandle($x), $x.don(IStudent)  );
end


/**
    Strong-typd rule reacting to the presence of IStudents in the WM
        Of course, any constraint or join coudl be applied...
    As a traited Student, trait behaviour is available and can be invoked,
    in addition to constraining on properties using the strict interface

    Implementation notice:
        As $x is updated, but no traits are involved, the simple "update" can
        be safely called.
*/
rule "Reaction"
when
    $x : IStudent( $s : school, age > 18 && age < 20 )
then
    System.out.println( $x.getName() +" : I am now a happy young student attending Math at " +$s );
        list.add($s);
        list.add($x.attendLesson("Math"));
        list.add($x.breathe());
        System.out.println($x.self_breathe($x));
    $x.setAge(25);
    $x.set("weight",214);
    update($x);
end


/**
    CWA Un-recognition rule.
    This time, a trait is removed.
    Notice that it is always possible to apply side-effects
*/
rule "Time Passes"
salience -50
when
    $x : IStudent( $s : school, age > 20  )
then
    System.out.println( $x.getName() +" : I am now too old "  );
    update( drools.getFactHandle($x), $x.shed(IStudent.class) );
    list.add($x.get("weight"));
end







rule "Log"
salience 10
when
    $x : IThing()
then
    System.out.println(">>>>>>>>>>>>>>>> Thing is in " + $x + " [[[[ " + $x.getTypes());
    System.out.println("\t\t Dyn. Properties " + $x.getMantle());
end


rule "CountHumans"
salience 10
when
    $x : IHuman()
then
    System.out.println("A IHuman has been insert or updated" + $x.getClass());
    tokens.add("x");
end

