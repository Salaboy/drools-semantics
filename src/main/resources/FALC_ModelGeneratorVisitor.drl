/*
 * Copyright 2011 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 package org.drools.semantics.lang.dl

import org.drools.base.DroolsQuery;
import org.semanticweb.owlapi.model.*;
import org.drools.semantics.builder.model.*;
import org.drools.semantics.builder.*;
import org.drools.semantics.lang.dl.templates.*;
import org.drools.semantics.builder.DLFactory;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.io.InputStream;
import java.io.IOException;
import org.mvel2.templates.*;



global OntoModel out;
global Integer checkCounter;






declare Domain
    domain      : String
    property    : IRI
end

declare Range
    range       : String
    property    : IRI
end


declare Mark
	arg			: SubConceptOf	@key
end


declare Explore
    sub         : String        @key
    sup         : String        @key
end

declare Blocker
    sub         : String        @key
    sup         : String        @key
end








query subConceptOf( SubConceptOf $link, String $sub, String $sup )
    $link := SubConceptOf( $sub, "subConceptOf", $sup ; )
end




rule "Init stat counter"
when
then
    kcontext.getKnowledgeRuntime().setGlobal( "checkCounter", new Integer(0) );
end

/**
    Compilation rule : concepts
*/

rule "Insert Concepts"
salience 1000
when
    $type : OWLClass( $iri : IRI )
then
    Concept con = new Concept( $iri.toQuotedString(),
                               DLUtils.getInstance().buildNameFromIri( $iri ),
                               new java.util.HashSet(),
                               new java.util.HashMap()
                               );
    out.addConcept( con );
    retract( $type );
    insertLogical( con );
    insert( new SubConceptOf( $iri.toQuotedString(), "<Thing>" ) );
    insert( new Explore( "<Thing>", $iri.toQuotedString() ) );
end












/**
    Lattice exploration rules
    Try to minimize the number of comparisons made between concepts in the hierarchy
*/

rule "Explore Lattice Down"
when
    $x : Explore( $father, $new ; )
    $s : SubConceptOf( $child := subject != $new, $father := object )
    subConceptOf( $link, $new, $child ; )
then
//    System.out.println( "DOWN : Binding "+ $new + " to " + $child );
    retract( $x );
    insert( new Explore( $child, $new ) );
end


rule "Explore Lattice Up"
when
    $x : Explore( $father, $new ; )
    $s : SubConceptOf( $child := subject != $new, $father := object )
    not subConceptOf( $link, $child, $new ; )
    exists SubConceptOf( $foo, "subConceptOf", $child ; )
then
    retract( $x );
//    System.out.println( "NOT UP : Binding "+ $child + " to " + $new  );
    insert( new Explore( $child, $new ) );
end


rule "Explore Lattice Bottom"
when
    $x : Explore( $father, $new ; )
    $s : SubConceptOf( $child := subject != $new, $father := object )
    not subConceptOf( $link, $child, $new ; )
    not SubConceptOf( $foo, "subConceptOf", $child ; )
then
    retract( $x );
end

/*
    Query management. Will trigger subsumption when needed
*/

rule "Opportunistic"
salience 9999
when
    $q : DroolsQuery( name == "subConceptOf", $args : elements )
    Concept( $sub : iri == $args[1] )
    Concept( $sup : iri == $args[2] )
then
	insert( new SubsumptionGoal($sub, $sup, true) );
end


rule "Match"
salience 999999
when
	$goal : SubsumptionGoal( $s1 : subClass, $s2 : superClass, $tau : tau )
	not Blocker( $s1, $s2 ; )
then
    System.out.println(" >>>>>>>>>>>>  SUB TEST " + $s1 + " vs " + $s2 + " <<<<<<<<<<<<<<<<<< ");
    retract( $goal );
    insert( new Blocker( $s1, $s2 ) );
    kcontext.getKnowledgeRuntime().setGlobal( "checkCounter", checkCounter + 1 );
    insert( new SubsumptionTest($s1, $s2, $tau) );
end

rule "Blocked"
salience 999999
when
	$goal : SubsumptionGoal( $s1 : subClass, $s2 : superClass, $tau : tau )
	Blocker( $s1, $s2 ; )
then
    retract( $goal );
end


/**
    Recasting fuzzy result to a boolean one
*/

rule "Combine"
salience 10
when
    $sx : SubClassOf( $sub : subject, $sup : object )
    $dx : Degree( $sx := subject, tau > 0 )
then
    SubConceptOf subCon = new SubConceptOf( $sub, $sup );
    out.addSubConceptOf( subCon );
    insert( subCon );
end

rule "Fail"
when
    $sx : SubClassOf( $sub : subject, $sup : object )
    $dx : Degree( $sx := subject )
then
    retract( $sx );
    retract( $dx );
end


















/** Tooling rule TODO? **/
rule "Check domains from subclassOf"
salience 99999
when
    $context : OWLOntology( )
	$klass   : OWLClass( $type : IRI )
	$rest    : OWLQuantifiedDataRestriction( $prop : property ) from $klass.getSuperClasses( $context )
	           OWLProperty( this == $prop )
	           not OWLClass( this == $klass ) from $prop.getDomains( $context )
then
//    $prop.getDomains( $context ).add( $klass );
    System.out.println(" @@@@@@ WARNING ADDED " + $klass + " to Property " + $prop + " DOMAIN " );
    Domain dom = new Domain( $klass.toString(), $rest.getProperty().asOWLDataProperty().getIRI() );
    System.out.println( dom );
    insert( dom );

end

rule "Check ranges from subclassOf"
salience 99999
when
    $context : OWLOntology( )
	$klass   : OWLClass( $type : IRI )
	$rest    : OWLQuantifiedDataRestriction( $prop : property, $filler : filler.IRI ) from $klass.getSuperClasses( $context )
	           not OWLClass( this == $filler, $iri : IRI ) from $prop.getRanges( $context )

then
//    $prop.getRanges( $context ).add( $klass );
    System.out.println(" @@@@@@ WARNING ADDED " + $filler + " to Property " + $prop + " RANGE " );
//    update( $prop );
    Range ran = new Range( $filler.toQuotedString(), $rest.getProperty().asOWLDataProperty().getIRI() );
    System.out.println( ran );
    insert( ran );
end






rule "Relations_Build"
when
    $prop : OWLProperty( $iri : IRI )
    $dom  : Domain( $domIri, $iri ; )
    $ran  : Range( $ranIri, $iri ; )
    $tgt  : Concept( iri == $iri )
then
    retract ( $prop );
    DLUtils utils = DLUtils.getInstance();
    PropertyRelation rel = new PropertyRelation( $domIri.toString(),
                                                 $iri.toQuotedString(),
                                                 $ranIri.toString(),
                                                 utils.buildLowCaseNameFromIri( $iri ) );
    rel.setTarget( $tgt );
    out.addProperty( rel );
    insert( rel );
end



rule "Relations Domain Simple"
when
    $ctx  : OWLOntology()
    $prop : OWLProperty( $iri : IRI )
    $domx : OWLClassExpression( classExpressionLiteral == true ) from $prop.getDomains( $ctx )
then
    Domain dom = new Domain( $domx.toString(), $iri );
    System.err.println( "DOMAIN S : "  + dom );
    insert( dom );
end

rule "Relations Domain Simple Visit"
when
    $ctx  : OWLOntology()
    $prop : OWLProperty( $iri : IRI )
    $domx : OWLClassExpression( classExpressionLiteral == true ) from $prop.getDomains( $ctx )
    not     Concept( $domx.toString() ; )
then
    insert( $domx );
end


rule "Relations Domain Complex"
when
    $onto : OWLOntology()
    $prop : OWLProperty( $iri : IRI )
    $domx : OWLClassExpression( classExpressionLiteral == false ) from $prop.getDomains( $onto )
then
    OWLDataFactory factory = $onto.getOWLOntologyManager().getOWLDataFactory();
    DLUtils utils = DLUtils.getInstance();
        OWLClass domClass = factory.getOWLClass( IRI.create( utils.buildNameFromIri( $prop.toString() ) + "Domain" ) );

    Domain dom = new Domain( domClass.toString(), $iri );
    System.err.println( "DOMAIN C: "  + dom );

    insert( dom );
    insert( domClass );
end


rule "Relations Domain Complex Visit"
when
    $onto : OWLOntology()
    $prop : OWLProperty( $iri : IRI )
    $domx : OWLClassExpression( classExpressionLiteral == false ) from $prop.getDomains( $onto )
    not     Concept( $domx.toString() ; )
then
    insert( $domx );
end



rule "Relations Range Simple"
when
    $ctx  : OWLOntology()
    $prop : OWLProperty( $iri : IRI )
    $ranx : OWLClassExpression( classExpressionLiteral == true ) from $prop.getRanges( $ctx )
then
    Range ran = new Range( $ranx.toString(), $iri );
    System.err.println( "RANGE S : "  + ran );
    insert( ran );
end

rule "Relations Range Simple Visit"
when
    $ctx  : OWLOntology()
    $prop : OWLProperty( $iri : IRI )
    $ranx : OWLClassExpression( classExpressionLiteral == true ) from $prop.getRanges( $ctx )
    not     Concept( $ranx.toString() ; )
then
    insert( $ranx );
end


rule "Relations Range Complex"
when
    $onto : OWLOntology()
    $prop : OWLProperty( $iri : IRI )
    $ranx : OWLClassExpression( classExpressionLiteral == false ) from $prop.getRanges( $onto )
then
    OWLDataFactory factory = $onto.getOWLOntologyManager().getOWLDataFactory();
    DLUtils utils = DLUtils.getInstance();
        OWLClass ranClass = factory.getOWLClass( IRI.create( utils.buildNameFromIri( $prop.toString() ) + "Range" ) );

    Range ran = new Range( ranClass.toString(), $iri );
    System.err.println( "RANGE C: "  + ran );

    insert( ran );
    insert( ranClass );

    insert( $ranx );
end

rule "Relations Range Complex Visit"
when
    $onto : OWLOntology()
    $prop : OWLProperty( $iri : IRI )
    $ranx : OWLClassExpression( classExpressionLiteral == false ) from $prop.getRanges( $onto )
    not     Concept( $ranx.toString() ; )
then
    insert( $ranx );
end




rule "Data Relations Range "
when
    $ctx  : OWLOntology()
    $prop : OWLProperty( $iri : IRI )
    $ranx : OWLDataRange( ) from $prop.getRanges( $ctx )
    $type : OWLDatatype( $typeIri : IRI ) from $ranx.asOWLDatatype()
then
    System.err.println("ALERT: WILL TRY TO MAP RANGE " + $typeIri +" for prop " + $prop);
    insert( new Range( $typeIri.toQuotedString(), $iri ) );
end











/**
    Remove redundancies, marking useless edges
*/
rule "Prune"
when
	$l : SubConceptOf( $i : subject, $j : object != "<Thing>" )
		$x1 : SubConceptOf( subject == $i , $o : object != $j, object != "<Thing>")
		and
		$x2 : SubConceptOf( subject == $o, object == $j, object != "<Thing>" )
    not Mark( $l ; )
    not SubConceptOf( subject == $j, object == $o )
then
    System.err.println( " ******************* RETRACT " + $l + " thanks to " + $x1 + " and " + $x2 );
	Mark m = new Mark();
		m.setArg($l);
	insert(m);
end


rule "Block Closure"
salience 100
when
    Blocker( $x, $y ; )
    Blocker( $y, $z ; )
    not Blocker( $x, $z ; )
then
    Blocker b = new Blocker( $x, $z );
    System.out.println( b );
    insert ( b );
end

/**
    Clear marked edges
*/
rule "Clear"
salience -10
when
	$sc : SubConceptOf()
	$m : Mark( arg == $sc )
then
    out.removeSubConceptOf( $sc );
	retract($sc);
	retract($m);
end









/**
    build superClass relations
*/
rule "Build Concepts : hierarchy"
salience -10000
when
    $sub : Concept( $iri ; $super : superConcepts )
    SubConceptOf( $iri, "subConceptOf", $iri2 ; )
    $sup : Concept( $iri2 ; this not memberOf $super )
then
    System.err.println(" >>>>>>>>>> BINDING " + $sub +  " to " + $sup);
    $super.add( $sup );
    update ( $sub );
    System.err.println(" >>>>>>>>>> BOUND " + $sub );
end



rule "Build Concepts : Obj Relations"
salience -10000
when
    $pro : PropertyRelation( $iri, $pred, $iri2 ; )
    $dom : Concept( $iri ; $props : properties, properties[ $pro ] == null )
    $ran : Concept( $iri2 ; )
then
    $props.put( $pro, $ran );
    update ( $dom );
    System.err.println(" >>>>>>>>>> PROPERTY " + $pred +  " into " + $dom);
end

rule "Build Concepts : Data Relations"
salience -10000
when
    $pro : PropertyRelation( $iri, $pred, $typeName ; )
    $dom : Concept( $iri ; $props : properties, properties[ $pro ] == null )
    $pri : PrimitiveMapping( $typeIri, $typeName, $target ; )
then
    System.err.println("Using simple c" + $pro);
    $props.put( $pro, new Concept( $typeName, $target ) );
    update ( $dom );
end



rule "Set Package"
when
    $onto    : OWLOntology( anonymous == false, $pack : ontologyID )
then
    out.setPackage( DLUtils.getInstance().iriToPackage( $pack.toString() ) );
end




//rule "Cleanup"
//salience -99999
//when
//    $b : Blocker()
//then
//    retract( $b );
//end













