/*
 * Copyright 2011 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 package org.drools.semantics.lang.dl

import org.drools.base.DroolsQuery;
import org.semanticweb.owlapi.model.*;
import org.drools.semantics.builder.model.*;
import org.drools.semantics.builder.model.OntoModel;
import org.drools.semantics.builder.*;
import org.drools.semantics.lang.dl.templates.*;
import org.drools.semantics.builder.DLFactory;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.io.InputStream;
import java.io.IOException;
import org.mvel2.templates.*;


global OntoModel latticeModel;



declare Mark
	arg			: SubConceptOf	@key
end



declare Explore
    sub         : String        @key
    sup         : String        @key
end


declare Blocker
    sub         : String        @key
    sup         : String        @key
end




query subConceptOf( SubConceptOf $link, String $sub, String $sup )
    $link := SubConceptOf( $sub, "subConceptOf", $sup ; )
end



/**
    Compilation rule : concepts
*/

rule "Insert Concepts"
salience 1000
when
    $type : OWLClass( $iri : IRI )
then
    Concept con = new Concept( $iri.toQuotedString(),
                               DLUtils.getInstance().buildNameFromIri( $iri ),
                               new java.util.HashSet(),
                               new java.util.HashMap(),
                               new java.util.HashSet()
                               );
    latticeModel.addConcept( con );
    retract( $type );
    insertLogical( con );
    insert( new SubConceptOf( $iri.toQuotedString(), "<Thing>" ) );
    insert( new Explore( "<Thing>", $iri.toQuotedString() ) );
end












/**
    Lattice exploration rules
    Try to minimize the number of comparisons made between concepts in the hierarchy
*/

rule "Explore Lattice Down"
salience 1
when
    $x : Explore( $father, $new ; )
    $s : SubConceptOf( $child := subject != $new, $father := object )
    subConceptOf( $link, $new, $child ; )
then
//    System.out.println( "DOWN : Binding "+ $new + " to " + $child );
    retract( $x );
    insert( new Explore( $child, $new ) );
end


rule "Explore Lattice Up"
salience 1
when
    $x : Explore( $father, $new ; )
    $s : SubConceptOf( $child := subject != $new, $father := object )
    not subConceptOf( $link, $child, $new ; )
    exists SubConceptOf( $foo, "subConceptOf", $child ; )
then
    retract( $x );
//    System.out.println( "NOT UP : Binding "+ $child + " to " + $new  );
    insert( new Explore( $child, $new ) );
end


rule "Explore Lattice Bottom"
when
    $x : Explore( $father, $new ; )
    $s : SubConceptOf( $child := subject != $new, $father := object )
    not subConceptOf( $link, $child, $new ; )
    not SubConceptOf( $foo, "subConceptOf", $child ; )
then
    retract( $x );
end

/*
    Query management. Will trigger subsumption when needed
*/

rule "Opportunistic"
salience 9999
when
    $q : DroolsQuery( name == "subConceptOf", $args : elements )
    Concept( $sub : iri, iri == $args[1] )
    Concept( $sup : iri, iri == $args[2] )
then
	insert( new SubsumptionGoal($sub, $sup, true) );
end





rule "Match"
salience 999999
when
	$goal : SubsumptionGoal( $s1 : subClass, $s2 : superClass, $tau : tau )
	not Blocker( $s1, $s2 ; )
then
    System.out.println(" >>>>>>>>>>>>  SUB TEST " + $s1 + " vs " + $s2 + " <<<<<<<<<<<<<<<<<< ");
    retract( $goal );
    insert( new Blocker( $s1, $s2 ) );
//    kcontext.getKnowledgeRuntime().setGlobal( "checkCounter", checkCounter + 1 );
    insert( new SubsumptionTest($s1, $s2, $tau) );
end

rule "Blocked"
salience 999999
when
	$goal : SubsumptionGoal( $s1 : subClass, $s2 : superClass, $tau : tau )
	        Blocker( $s1, $s2 ; )
then
    retract( $goal );
end


/**
    Recasting fuzzy result to a boolean one
*/

rule "Combine"
salience 10
when
    $sx : SubClassOf( $sub : subject, $sup : object )
    $dx : Degree( $sx := subject, tau > 0 )
then
    SubConceptOf subCon = new SubConceptOf( $sub, $sup );
    latticeModel.addSubConceptOf( subCon );
    System.err.println(" Insert new SC " + subCon );
    insert( subCon );
end




rule "Aftermath"
when
    $sx : SubClassOf( $sub : subject, $sup : object )
    $dx : Degree( $sx := subject )
then
    retract( $sx );
    retract( $dx );
end



















rule "Disable Equivalent Loops"
salience 99999999
no-loop
when
    $s1 : SubConceptOf( $i : subject, $j : object, enabled == true )
    $s2 : SubConceptOf( subject == $j, object == $i, enabled == true )
then
    System.err.println(" ************************** EQUIVALENCE of " + $i + " and " + $j + " DISABLE " + $s1 );
    $s1.setEnabled( false );
    update($s1);
end


rule "Equivalent Concepts"
no-loop
when
    $s1 : SubConceptOf( $i : subject, $j : object )
    $s2 : SubConceptOf( subject == $j, object == $i )
    $c1 : Concept( iri == $i )
    $c2 : Concept( iri == $j )
then
    $c1.getEquivalentConcepts().add( $c2 );
    $c2.getEquivalentConcepts().add( $c1 );
end





/*

rule "Equivalent"
salience -999
no-loop
when
    $s1 : SubConceptOf( $i : subject, $j : object )
    $s2 : SubConceptOf( subject == $j, object == $i )
    $c1 : Concept( iri == $i )
    $c2 : Concept( iri == $j )
then
    System.err.println(" ************************** EQUIVALENCE of " + $i + " and " + $j );
    retract( $c2 );
    $c1.getEquivalentConcepts().add( $c2 );
    $c2.getEquivalentConcepts().add( $c1 );
end



rule "Equivalent Reroute"
salience -10000
no-loop
when
    $s1 : SubConceptOf( $i : subject, $j : object )
    $s2 : SubConceptOf( subject == $j, object == $i )
          not Concept( iri == $j )
    $s3 : SubConceptOf( $z : subject != $j, $k : object == $i)
    not   SubConceptOf( subject == $z, object == $j )
then
    System.err.println(" ************************** RER EQUIVALENCE of " + $i + " and " + $j + " applied to " + $z );
    $s3.setObject( $j );
    update( $s3 );
end

rule "Equivalent Redundancy"
salience -10000
no-loop
when
    $s1 : SubConceptOf( $i : subject, $j : object )
    $s2 : SubConceptOf( subject == $j, object == $i )
          not Concept( iri == $j )
    $s3 : SubConceptOf( $z : subject != $j, $k : object == $i )
          SubConceptOf( subject == $z, object == $j )
then
    System.err.println(" ************************** RED EQUIVALENCE of " + $i + " and " + $j + " applied to " + $z + ", remove " + $s3 );
    retract( $s3 );
    latticeModel.removeSubConceptOf( $s3 );
end
*/



/**
    Remove redundancies, marking useless edges
*/
rule "Prune"
salience -10000
when
	$l : SubConceptOf( $i : subject, $j : object != "<Thing>" )

	    $x1 : SubConceptOf( subject == $i , $o : object != $j, object != "<Thing>", enabled == true )

		$x2 : SubConceptOf( subject == $o, object == $j, object != "<Thing>", enabled == true )

    not Mark( $l ; )
    not SubConceptOf( subject == $j, object == $o )
then
    System.err.println( " ******************* RETRACT " + $l + " thanks to " + $x1 + " and " + $x2 );
	Mark m = new Mark( $l );

	insert(m);
end


rule "Block Closure"
salience 100
when
    Blocker( $x, $y ; )
    Blocker( $y, $z ; )
    not Blocker( $x, $z ; )
then
    Blocker b = new Blocker( $x, $z );
    System.out.println( b );
    insert ( b );
end

/**
    Clear marked edges
*/
rule "Clear"
salience -100000
when
	$sc : SubConceptOf()
	$m1 : Mark( arg == $sc )
then
    System.err.println( " ******************* REALLY RETRACT " + $sc );
    latticeModel.removeSubConceptOf( $sc );
	retract($sc);
	retract($m1);
end











/**
    build superClass relations
*/
rule "Build Concepts : hierarchy"
salience -10000
when
    $sub : Concept( $iri ; $super : superConcepts )
    SubConceptOf( $iri, "subConceptOf", $iri2 ; )
    $sup : Concept( $iri2 ; this not memberOf $super )
then
    System.err.println(" >>>>>>>>>> BINDING " + $sub +  " to " + $sup);
    $super.add( $sup );
    update ( $sub );
    System.err.println(" >>>>>>>>>> BOUND " + $sub );
end





rule "Set Package"
when
    $onto    : OWLOntology( anonymous == false, $pack : ontologyID )
then
    latticeModel.setPackage( DLUtils.getInstance().iriToPackage( $pack.toString() ) );
end




//rule "Cleanup"
//salience -99999
//when
//    $b : Blocker()
//then
//    retract( $b );
//end









