@comment{
/*
 * Copyright 2011 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

}
@declare{'forallTemplate'}

/*********************************************************************************/

 
rule "Forall_@{id}"
salience -90
when
	$test : DLTest( $prob : problem )
	$t : HypoType( goal == $test , $xlab : label,
			       $x : subject, object == "@{id}")
    $p : Property( $pred : predicate == "@{prop}", subject == $x, $y : object )
	$d : Degree( subject == $t , $l : value )	
then				
//	System.out.println("Rule Forall -------> @{prop}.@{target}" );

	RealVariable[] vars = new RealVariable[2];

	HypoProperty hyprop = new HypoProperty($pred, $x, $y, $test);
	HypoType type = new HypoType( $y, "@{target}", false , $test);
	
	vars[0] = ConstraintFactory.newUnitIntervalVariable("x_"+$p.getLabel(),$prob);
	vars[1] = ConstraintFactory.newUnitIntervalVariable("x_"+type.getLabel(),$prob);
	
	Degree propDeg = new Degree(hyprop,vars[0]);
 	Degree degree = new Degree(type,vars[1]);

    System.out.println("\t\tRule Forall -------> Created " + type );
	System.out.println("\t\tRule Forall -------> Created " + hyprop );
						
	IntegerVariable y = ConstraintFactory.newBooleanVariable("y_@{id}",$prob);
	ConstraintFactory.addForallConstraint( vars[0], vars[1], y, $l, $prob);

	insertLogical(hyprop);
	insertLogical(propDeg);
	
	insertLogical(type);		
	insertLogical(degree);	
end 



/*********************************************************************************/

@end{}

@includeNamed{'forallTemplate'}